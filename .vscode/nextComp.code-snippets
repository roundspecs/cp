{
    "Next Comp with Monotonic Stack": {
        "prefix": "next comp",
        "body": [
            "template <typename T>",
            "vector<int> nextComp(vector<T> v, function<bool(T, T)> comp) {",
            "	int n = v.size();",
            "	stack<int> pending;",
            "	vector<int> ans(n);",
            "	// for (int i = n-1; i >= 0; i--) // prev",
            "	for (int i = 0; i < n; i++) {",
            "		while (!pending.empty() && comp(v[i], v[pending.top()])) {",
            "			ans[pending.top()] = i;",
            "			pending.pop();",
            "		}",
            "		pending.push(i);",
            "	}",
            "	while (!pending.empty()) {",
            "		ans[pending.top()] = n; // -1; // prev",
            "		pending.pop();",
            "	}",
            "	return ans;",
            "}"
        ],
        "description": "Next Comp with Monotonic Stack"
    }
}